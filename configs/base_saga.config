// Copyright (C) 2022 Roberto Rossini <roberros@uio.no>
//
// SPDX-License-Identifier: MIT

process {
    cpus   = { check_max(1 * task.attempt, 'cpu') }
    memory = { check_max(3.5.GB * task.attempt, 'memory') }
    time   = { check_max(1.h * task.attempt, 'time') }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    withLabel:process_low {
        cpus   = { check_max(2 * task.attempt, 'cpus') }
        memory = { check_max(6.GB * task.attempt, 'memory') }
        time   = { check_max(4.h * task.attempt, 'time') }
    }
    withLabel:process_medium {
        cpus   = { check_max(10 * task.attempt, 'cpus') }
        memory = { check_max(32.GB * task.attempt, 'memory') }
        time   = { check_max(4.h * task.attempt, 'time') }
    }
    withLabel:process_high {
        cpus   = { check_max(20 * task.attempt, 'cpus') }
        memory = { check_max(48.GB * task.attempt, 'memory') }
        time   = { check_max(4.h * task.attempt, 'time') }
    }
    withLabel:process_very_high {
        cpus   = { check_max(52 * task.attempt, 'cpus') }
        memory = { check_max(64.GB * task.attempt, 'memory') }
        time   = { check_max(4.h * task.attempt, 'time') }
    }
    withLabel:process_very_short {
        time   = { check_max(2.m * task.attempt, 'time') }
    }
    withLabel:process_short {
        time   = { check_max(10.m * task.attempt, 'time') }
    }
    withLabel:process_long {
        time   = { check_max(6.h * task.attempt, 'time') }
    }
    withLabel:process_very_long {
        time   = { check_max(48.h * task.attempt, 'time') }
    }
    withLabel:process_medium_memory {
        memory = 32.GB
    }
    withLabel:process_high_memory {
        memory = 128.GB
    }
    withLabel:process_very_high_memory {
        memory = 192.GB
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 5
    }
}

params {
    script_dir = '/scripts'
}


singularity {
    cacheDir = 'containers/cache'
    enabled = true
    runOptions = "-B ${launchDir}/scripts:${params.script_dir}:ro"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
